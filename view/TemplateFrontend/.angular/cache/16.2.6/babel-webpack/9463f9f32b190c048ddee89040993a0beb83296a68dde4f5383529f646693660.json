{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TemplateService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/api';\n  }\n  uploadTemplate(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n  getUploadedData() {\n    return this.http.get(`${this.apiUrl}/data`);\n  }\n  downloadTemplate() {\n    // Adjust the headers based on your API requirementss\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    return this.http.get(`${this.apiUrl}/download`, {\n      responseType: 'blob',\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function TemplateService_Factory(t) {\n    return new (t || TemplateService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TemplateService,\n    factory: TemplateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","TemplateService","constructor","http","apiUrl","uploadTemplate","file","formData","FormData","append","post","getUploadedData","get","downloadTemplate","headers","responseType","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Template\\src\\app\\template\\template.service.ts"],"sourcesContent":["// template.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TemplateService {\n  private apiUrl = '/api'; \n\n  constructor(private http: HttpClient) {}\n\n  uploadTemplate(file: File): Observable<any> {\n    const formData: FormData = new FormData();\n    formData.append('file', file);\n\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n\n  getUploadedData(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/data`);\n  }\n\n  downloadTemplate(): Observable<Blob> {\n    // Adjust the headers based on your API requirementss\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    });\n\n    return this.http.get(`${this.apiUrl}/download`, { responseType: 'blob', headers });\n  }\n\n  \n}\n"],"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,MAAM;EAEgB;EAEvCC,cAAcA,CAACC,IAAU;IACvB,MAAMC,QAAQ,GAAa,IAAIC,QAAQ,EAAE;IACzCD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,OAAO,IAAI,CAACH,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,SAAS,EAAEG,QAAQ,CAAC;EAC1D;EAEAI,eAAeA,CAAA;IACb,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,MAAM,OAAO,CAAC;EAC7C;EAEAS,gBAAgBA,CAAA;IACd;IACA,MAAMC,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEF,OAAO,IAAI,CAACG,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,MAAM,WAAW,EAAE;MAAEW,YAAY,EAAE,MAAM;MAAED;IAAO,CAAE,CAAC;EACpF;EAAC,QAAAE,CAAA,G;qBAvBUf,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfpB,eAAe;IAAAqB,OAAA,EAAfrB,eAAe,CAAAsB,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}